# we run the model setting the penalization term equal to 900
Insulin_results2i_l900 <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames, data = df,
q = 10, validation = 0, b = 100, b1_pos = TRUE, rh = 5,
family = "gaussian", seed = 2024, lambda = 900)
# we run the model setting the penalization term equal to 900
Insulin_results2i_l9000 <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames, data = df,
q = 10, validation = 0, b = 100, b1_pos = TRUE, rh = 5,
family = "gaussian", seed = 2024, lambda = 9000)
Insulin_lambda_AIC_2i <- data.frame(lambda = c(0, 90, 900, 9000),
AIC = c(Insulin_results2i$fit$aic, Insulin_results2i_l90$fit$aic,
Insulin_results2i_l900$fit$aic, Insulin_results2i_l9000$fit$aic))
print(kable(Insulin_lambda_AIC_2i) %>% kable_styling())
####### calculate the conjunct influence
####### Step 1
### For Resistin
library(gWQS)
library(ggplot2)
library(knitr)
library(kableExtra)
library(reshape2)
library(data.table)
library(fastDummies)
library(dplyr)
library(readxl)
library(stringr)
# Load data
data <- fread("C:/Users/yuqingw1/Workfolder/ProcessingData/microbiome_allvariable_806_transformation.csv")
data_dimensions <- dim(data)
print(data_dimensions)
num_rows <- nrow(data)
num_cols <- ncol(data)
print(paste("Rows:", num_rows, "Columns:", num_cols))
# Define cut points
cutPoints <- c(18.5, 25, 30)
subset_data <- data[!is.na(data$bmi),]
subset_data$bmi_binned2 <- cut(subset_data$bmi, breaks = c(-Inf, cutPoints, Inf), labels = FALSE)
subset_data$bmi_binned2 <- as.character(subset_data$bmi_binned2)
missing_data <- data[is.na(data$bmi),]
missing_data$bmi_binned2 <- "missing"
data <- rbind(subset_data, missing_data)
new_labels <- c(
"inf_18.5",
"18.5_25.0",
"25.0_30.0",
"30.0_inf",
"missing"
)
data$bmi_binned2 <- factor(data$bmi_binned2, labels = new_labels)
table(data$bmi_binned2)
data$gender <- as.character(data$gender)
data$gender[data$gender == ""] <- "missing"
table(data$gender)
data$smoking_status <- as.character(data$smoking_status)
data$smoking_status[data$smoking_status == ""] <- "missing"
table(data$smoking_status)
data$diabetes2 <- as.character(data$diabetes2)
data$diabetes2[data$diabetes2 %in% c("I don't know", "I prefer not to answer")] <- "missing"
data$diabetes2[data$diabetes2 == ""] <- "missing"
table(data$diabetes2)
age_mean <- mean(data$age, na.rm = TRUE)
# Fill missing values in the 'age' column with the mean
data$age[is.na(data$age)] <- age_mean
df <- dummy_cols(data, select_columns = c("gender", "bmi_binned2", "smoking_status", "diabetes2"), remove_selected_columns = TRUE)
### drop nan value of biomarker and air pollution
na_in_Resistin <- sum(is.na(df$Resistin))
print(paste("NA in Resistin:", na_in_Resistin))
df <- df[!is.na(df$Resistin), ]
df$Resistin_v2 <- log(df$Resistin)
df$Resistin_v3 <- (df$Resistin_v2 - mean(df$Resistin_v2)) / sd(df$Resistin_v2)
data_dimensions <- dim(df)
print(data_dimensions)
print(names(df))
pwqs <- c('UPDASV260',
'UPDASV092',
'UPDASV087',
'UPDASV105',
'UPDASV346',
'UPDASV468',
'UPDASV337',
'UPDASV281',
'UPDASV339',
'UPDASV389',
'UPDASV001',
'UPDASV375',
'UPDASV384',
'UPDASV037',
'UPDASV218',
'UPDASV286',
'UPDASV278',
'UPDASV311',
'UPDASV212',
'UPDASV256',
'UPDASV126')
nwqs <- c('UPDASV444')
mixedcor <- c(pwqs, nwqs)
mixedcor_df <- data.frame(Index = mixedcor)
# Read taxonIDname dataframe
taxonIDname <- read_excel("C:\\Users\\yuqingw1\\Workfolder\\ProcessingData\\processing_4_microbiome_new\\taxonIDmappingdict.xlsx")
# Merge mixedcor_df with taxonIDname
merged_df <- mixedcor_df %>%
inner_join(taxonIDname, by = c("Index" = "newtaxonID"))
# Define the custom function
extract_name <- function(row) {
attlist <- str_split(row, ",")[[1]]
if (attlist[length(attlist)] == 'nan') {
if (attlist[length(attlist) - 1] != 'nan') {
name <- paste('Family:', attlist[length(attlist) - 1])
} else if (attlist[length(attlist) - 2] != 'nan') {
name <- paste('Order:', attlist[length(attlist) - 2])
} else if (attlist[length(attlist) - 3] != 'nan') {
name <- paste('Class:', attlist[length(attlist) - 3])
} else if (attlist[length(attlist) - 4] != 'nan') {
name <- paste('Phylum:', attlist[length(attlist) - 4])
} else {
name <- paste('Unknown:', attlist[length(attlist) - 5])
}
} else {
name <- attlist[length(attlist)]
}
return(name)
}
# Assuming 'name' is the data frame and 'attribute' is the column
merged_df <- merged_df %>%
mutate(newname = sapply(attribute, extract_name))
merged_df$newname <- gsub("_", " ", merged_df$newname)
# Convert mixedcor values to new names
mixedcor_with_newnames <- merged_df$newname
name_mapping <- merged_df %>%
filter(Index %in% colnames(df)) %>%
select(Index, newname)
# Create a named vector for renaming
rename_vector <- setNames(name_mapping$Index, name_mapping$newname)
# Rename the columns in df
df <- df %>%
rename(!!!rename_vector)
pwqs_newnames <- name_mapping$newname[name_mapping$Index %in% pwqs]
nwqs_newnames <- name_mapping$newname[name_mapping$Index %in% nwqs]
pwqs <- as.character(pwqs_newnames)
nwqs <- as.character(nwqs_newnames)
#### mixture model
formula_str <- "Resistin_v3 ~ pwqs + nwqs + age + gender_Male + bmi_binned2_30.0_inf + bmi_binned2_inf_18.5 + smoking_status_Current + diabetes2_Yes"
Resistin_results2i <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames,
data = df,
q = 10, validation = 0, b = 100, b1_pos = TRUE, b_constr = TRUE, rh = 5,
family = "gaussian", seed = 2024)
summary(Resistin_results2i)
Resistin_summary_model <- summary(Resistin_results2i)
# Extract coefficients
Resistin_coefficients_info <- Resistin_summary_model$coefficients  # This usually contains estimates, std. error, t-value, and p-value
# Get confidence intervals
Resistin_conf_intervals <- confint(Resistin_results2i, level = 0.95)  # Adjust the level if needed
# Base R approach
Resistin_coefficients_df <- data.frame(Resistin_coefficients_info)
Resistin_conf_intervals_df <- data.frame(Resistin_conf_intervals)
# Naming the columns correctly
names(Resistin_conf_intervals_df) <- c("2.5 %", "97.5 %")
# Combining the estimates and confidence intervals
Resistin_final_df <- cbind(Resistin_coefficients_df, Resistin_conf_intervals_df)
# If you only want certain columns (Estimate, Std. Error, 2.5 %, 97.5 %)
Resistin_final_df <- Resistin_final_df[, c("Estimate", "Std..Error", "2.5 %", "97.5 %")]
print(Resistin_final_df)
print(gwqs_summary_tab(Resistin_results2i))
Resistin_mf_df <- as.data.frame(signif(coef(summary(Resistin_results2i)), 3))
print(kable_styling(kable(Resistin_mf_df, row.names = TRUE)))
print(gwqs_weights_tab(Resistin_results2i))
Resistin_final_weight <- Resistin_results2i$final_weights
Resistin_final_weight[, -1] <- signif(Resistin_final_weight[, -1], 3)
print(kable_styling(kable(Resistin_final_weight, row.names = FALSE)))
###### Resistin Step 2
# we run the model setting the penalization term equal to 90
Resistin_results2i_l90 <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames, data = df,
q = 10, validation = 0, b = 100, b1_pos = TRUE, rh = 5,
family = "gaussian", seed = 2024, lambda = 90)
# we run the model setting the penalization term equal to 900
Resistin_results2i_l900 <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames, data = df,
q = 10, validation = 0, b = 100, b1_pos = TRUE, rh = 5,
family = "gaussian", seed = 2024, lambda = 900)
# we run the model setting the penalization term equal to 900
Resistin_results2i_l9000 <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames, data = df,
q = 10, validation = 0, b = 100, b1_pos = TRUE, rh = 5,
family = "gaussian", seed = 2024, lambda = 9000)
Resistin_lambda_AIC_2i <- data.frame(lambda = c(0, 90, 900, 9000),
AIC = c(Resistin_results2i$fit$aic, Resistin_results2i_l90$fit$aic,
Resistin_results2i_l900$fit$aic, Resistin_results2i_l9000$fit$aic))
print(kable(Resistin_lambda_AIC_2i) %>% kable_styling())
### Resistin plot
library(ggplot2)
Resistin_box <- gwqs_boxplot(Resistin_results2i) +
labs(x = NULL, y=NULL, title = "Resistin conjunct infulence") +
theme(plot.title = element_text(hjust = 0.5))
# (axis.text.x = element_text(size = 4, angle = 45, hjust = 1)))
print(Resistin_box)
library(ggplot2)
### PLOT
insulin_box <- gwqs_boxplot(Insulin_results2i) +
labs(x = NULL, y=NULL, title = "Insulin conjunct infulence") +
theme(plot.title = element_text(hjust = 0.5))
# (axis.text.x = element_text(size = 4, angle = 45, hjust = 1)))
print(insulin_box)
# Extract the weights
Resistin_weights <- Resistin_results2i$final_weights
# Create a boxplot
ggplot(Resistin_weights, aes(x = reorder(mix_name, weight), y = final_weights)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Resistin WQS Weights", x = "Mixture Components", y = "Resistin Weight") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Extract the weights
Resistin_weights <- Resistin_results2i$final_weights
# Create a boxplot
ggplot(Resistin_weights, aes(x = reorder(mix_name, final_weights), y = final_weights)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Resistin WQS Weights", x = "Mixture Components", y = "Resistin Weight") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gwqs_boxplot
library(ggplot2)
library(reshape2)
wboxplot <- melt(Resistin_results2i$wmat, varnames = c("rh", "mix_name"))
if (!is.null(Resistin_results2i$stratified)) {
wboxplot$strata <- sapply(wboxplot$mix_name, function(i) {
l <- levels(Resistin_results2i$data[, Resistin_results2i$stratified])
l[sapply(l, function(j) grepl(paste0("_", j, "$"), i))]
})
wboxplot$mix_name <- sapply(1:nrow(wboxplot), function(i) sub(paste0("_", wboxplot$strata[i], "$"), "", wboxplot$mix_name[i]))
tmp <- Resistin_results2i$final_weights
tmp$strata <- sapply(tmp$mix_name, function(i) {
l <- levels(Resistin_results2i$data[, Resistin_results2i$stratified])
l[sapply(l, function(j) grepl(paste0("_", j, "$"), i))]
})
tmp$mix_name <- sapply(1:nrow(tmp), function(i) sub(paste0("_", tmp$strata[i], "$"), "", tmp$mix_name[i]))
tmp <- tmp[order(paste0(tmp$strata, tmp$mean_weight)), ]
wboxplot$mix_name <- factor(wboxplot$mix_name, levels = unique(tmp$mix_name))
} else {
wboxplot$mix_name <- factor(wboxplot$mix_name, levels = Resistin_results2i$final_weights$mix_name)
}
box_plot <- ggplot(wboxplot, aes_string(x = "mix_name", y = "value")) +
geom_boxplot(outlier.shape = " ") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Weight") +
stat_summary(fun = mean, geom = "point", shape = 18, size = 3) +
geom_jitter(alpha = 0.3)
tau <- 1/length(Resistin_results2i$mix_name)
box_plot <- box_plot + geom_hline(yintercept = tau, linetype = "dashed", color = "red")
if (Resistin_results2i$dwqs) {
box_plot <- box_plot + facet_wrap(~L1, ncol = 1)
}
if (!is.null(Resistin_results2i$stratified)) {
box_plot <- box_plot + facet_wrap(~strata, ncol = 1)
}
library(ggplot2)
library(reshape2)
wboxplot <- melt(Resistin_results2i$wmat, varnames = c("rh", "mix_name"))
if (!is.null(Resistin_results2i$stratified)) {
wboxplot$strata <- sapply(wboxplot$mix_name, function(i) {
l <- levels(Resistin_results2i$data[, Resistin_results2i$stratified])
l[sapply(l, function(j) grepl(paste0("_", j, "$"), i))]
})
wboxplot$mix_name <- sapply(1:nrow(wboxplot), function(i) sub(paste0("_", wboxplot$strata[i], "$"), "", wboxplot$mix_name[i]))
tmp <- Resistin_results2i$final_weights
tmp$strata <- sapply(tmp$mix_name, function(i) {
l <- levels(Resistin_results2i$data[, Resistin_results2i$stratified])
l[sapply(l, function(j) grepl(paste0("_", j, "$"), i))]
})
tmp$mix_name <- sapply(1:nrow(tmp), function(i) sub(paste0("_", tmp$strata[i], "$"), "", tmp$mix_name[i]))
tmp <- tmp[order(paste0(tmp$strata, tmp$mean_weight)), ]
wboxplot$mix_name <- factor(wboxplot$mix_name, levels = unique(tmp$mix_name))
} else {
wboxplot$mix_name <- factor(wboxplot$mix_name, levels = Resistin_results2i$final_weights$mix_name)
}
box_plot <- ggplot(wboxplot, aes_string(x = "mix_name", y = "value")) +
geom_boxplot(outlier.shape = " ") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Weight") +
stat_summary(fun = mean, geom = "point", shape = 18, size = 3) +
geom_jitter(alpha = 0.3)
tau <- 1/length(Resistin_results2i$mix_name)
box_plot <- box_plot + geom_hline(yintercept = tau, linetype = "dashed", color = "red")
if (Resistin_results2i$dwqs) {
box_plot <- box_plot + facet_wrap(~L1, ncol = 1)
}
if (!is.null(Resistin_results2i$stratified)) {
box_plot <- box_plot + facet_wrap(~strata, ncol = 1)
}
print(box_plot)
save(Resistin_results2i, file = "Resistin_results2i.RData")
save(Resistin_results2i_l90, file = "Resistin_results2i_l90.RData")
save(Resistin_results2i_l900, file = "Resistin_results2i_l900.RData")
save(Resistin_results2i_l9000, file = "Resistin_results2i_l9000.RData")
save(Insulin_results2i, file = "Insulin_results2i.RData")
save(Insulin_results2i_l90, file = "Insulin_results2i_l90.RData")
save(Insulin_results2i_l900, file = "Insulin_results2i_l900.RData")
save(Insulin_results2i_l9000, file = "Insulin_results2i_l9000.RData")
abctest <- load("C:\Users\yuqingw1\Documents\Mixture Model\Insulin_results2i.RData")
abctest <- load("C:\\Users\\yuqingw1\\Documents\\Mixture Model\\Insulin_results2i.RData")
abctest$final_weights
abctest
load("C:\Users\yuqingw1\Documents\Mixture Model\abctest.RData")
load("C:\\Users\\yuqingw1\\Documents\\Mixture Model\\abctest.RData")
print(abctest)
abctest$final_weights
print(abctest)
print(Insulin_results2i)
Insulin_results2i$final_weights
print(abctest)
Insulin_results2i
load("C:\\Users\\yuqingw1\\Documents\\Mixture Model\\abctest.RData")
abctest
####### calculate the conjunct influence
### For Ghrelin
library(gWQS)
library(ggplot2)
library(knitr)
library(kableExtra)
library(reshape2)
library(data.table)
library(fastDummies)
library(dplyr)
library(readxl)
library(stringr)
# Load data
data <- fread("C:/Users/yuqingw1/Workfolder/ProcessingData/microbiome_allvariable_806_transformation.csv")
data_dimensions <- dim(data)
print(data_dimensions)
num_rows <- nrow(data)
num_cols <- ncol(data)
print(paste("Rows:", num_rows, "Columns:", num_cols))
# Define cut points
cutPoints <- c(18.5, 25, 30)
subset_data <- data[!is.na(data$bmi),]
subset_data$bmi_binned2 <- cut(subset_data$bmi, breaks = c(-Inf, cutPoints, Inf), labels = FALSE)
subset_data$bmi_binned2 <- as.character(subset_data$bmi_binned2)
missing_data <- data[is.na(data$bmi),]
missing_data$bmi_binned2 <- "missing"
data <- rbind(subset_data, missing_data)
new_labels <- c(
"inf_18.5",
"18.5_25.0",
"25.0_30.0",
"30.0_inf",
"missing"
)
data$bmi_binned2 <- factor(data$bmi_binned2, labels = new_labels)
table(data$bmi_binned2)
data$gender <- as.character(data$gender)
data$gender[data$gender == ""] <- "missing"
table(data$gender)
data$smoking_status <- as.character(data$smoking_status)
data$smoking_status[data$smoking_status == ""] <- "missing"
table(data$smoking_status)
data$diabetes2 <- as.character(data$diabetes2)
data$diabetes2[data$diabetes2 %in% c("I don't know", "I prefer not to answer")] <- "missing"
data$diabetes2[data$diabetes2 == ""] <- "missing"
table(data$diabetes2)
age_mean <- mean(data$age, na.rm = TRUE)
# Fill missing values in the 'age' column with the mean
data$age[is.na(data$age)] <- age_mean
df <- dummy_cols(data, select_columns = c("gender", "bmi_binned2", "smoking_status", "diabetes2"), remove_selected_columns = TRUE)
### drop nan value of biomarker and air pollution
na_in_Ghrelin <- sum(is.na(df$Ghrelin))
print(paste("NA in Ghrelin:", na_in_Ghrelin))
df <- df[!is.na(df$Ghrelin), ]
df$Ghrelin_v2 <- log(df$Ghrelin)
df$Ghrelin_v3 <- (df$Ghrelin_v2 - mean(df$Ghrelin_v2)) / sd(df$Ghrelin_v2)
data_dimensions <- dim(df)
print(data_dimensions)
print(names(df))
pwqs <- c('UPDASV219', 'UPDASV290', 'UPDASV388', 'UPDASV451', 'UPDASV412', 'UPDASV161', 'UPDASV111', 'UPDASV125', 'UPDASV199', 'UPDASV213', 'UPDASV397', 'UPDASV355', 'UPDASV036', 'UPDASV100', 'UPDASV431', 'UPDASV040', 'UPDASV315', 'UPDASV403', 'UPDASV423', 'UPDASV324', 'UPDASV119', 'UPDASV365', 'UPDASV283', 'UPDASV023', 'UPDASV381', 'UPDASV109', 'UPDASV332', 'UPDASV015', 'UPDASV275', 'UPDASV300', 'UPDASV241', 'UPDASV003', 'UPDASV009', 'UPDASV027', 'UPDASV034', 'UPDASV047', 'UPDASV048', 'UPDASV050', 'UPDASV056', 'UPDASV067', 'UPDASV068', 'UPDASV071', 'UPDASV074', 'UPDASV080', 'UPDASV091', 'UPDASV095', 'UPDASV102', 'UPDASV106', 'UPDASV107', 'UPDASV114', 'UPDASV123', 'UPDASV143', 'UPDASV148', 'UPDASV171', 'UPDASV189', 'UPDASV193', 'UPDASV194', 'UPDASV196', 'UPDASV201', 'UPDASV208', 'UPDASV214', 'UPDASV221', 'UPDASV235', 'UPDASV237', 'UPDASV244', 'UPDASV247', 'UPDASV248', 'UPDASV249', 'UPDASV257', 'UPDASV267', 'UPDASV274', 'UPDASV295', 'UPDASV297', 'UPDASV312', 'UPDASV323', 'UPDASV334', 'UPDASV335', 'UPDASV347', 'UPDASV351', 'UPDASV357', 'UPDASV363', 'UPDASV364', 'UPDASV373', 'UPDASV379', 'UPDASV383', 'UPDASV395', 'UPDASV400', 'UPDASV407', 'UPDASV408', 'UPDASV411', 'UPDASV414', 'UPDASV418', 'UPDASV437', 'UPDASV443', 'UPDASV453', 'UPDASV454', 'UPDASV455', 'UPDASV469', 'UPDASV477', 'UPDASV478', 'UPDASV245', 'UPDASV284', 'UPDASV005', 'UPDASV070', 'UPDASV044', 'UPDASV170', 'UPDASV210', 'UPDASV378', 'UPDASV419', 'UPDASV033', 'UPDASV466', 'UPDASV232', 'UPDASV352', 'UPDASV133', 'UPDASV427', 'UPDASV259', 'UPDASV156', 'UPDASV320', 'UPDASV177', 'UPDASV271', 'UPDASV110', 'UPDASV020', 'UPDASV449', 'UPDASV269', 'UPDASV002', 'UPDASV227', 'UPDASV182', 'UPDASV462', 'UPDASV117', 'UPDASV179', 'UPDASV353', 'UPDASV426', 'UPDASV007', 'UPDASV279', 'UPDASV242', 'UPDASV448', 'UPDASV317', 'UPDASV132', 'UPDASV138', 'UPDASV021', 'UPDASV416', 'UPDASV479', 'UPDASV112', 'UPDASV301', 'UPDASV206', 'UPDASV330', 'UPDASV344', 'UPDASV041', 'UPDASV425', 'UPDASV246', 'UPDASV231', 'UPDASV328', 'UPDASV277', 'UPDASV135', 'UPDASV069', 'UPDASV031', 'UPDASV288', 'UPDASV205', 'UPDASV226', 'UPDASV441', 'UPDASV093', 'UPDASV098', 'UPDASV078', 'UPDASV159', 'UPDASV172', 'UPDASV121', 'UPDASV433', 'UPDASV167', 'UPDASV099', 'UPDASV263', 'UPDASV038', 'UPDASV230', 'UPDASV305', 'UPDASV141', 'UPDASV457', 'UPDASV229', 'UPDASV272', 'UPDASV458', 'UPDASV484', 'UPDASV343', 'UPDASV255', 'UPDASV140', 'UPDASV183', 'UPDASV405', 'UPDASV190', 'UPDASV042', 'UPDASV464', 'UPDASV471', 'UPDASV396', 'UPDASV325', 'UPDASV452', 'UPDASV354', 'UPDASV160', 'UPDASV145', 'UPDASV052')
nwqs <- c('UPDASV260', 'UPDASV092', 'UPDASV087', 'UPDASV105', 'UPDASV346', 'UPDASV468', 'UPDASV337', 'UPDASV281', 'UPDASV339', 'UPDASV389', 'UPDASV001', 'UPDASV375', 'UPDASV384', 'UPDASV154', 'UPDASV037', 'UPDASV265', 'UPDASV222', 'UPDASV225', 'UPDASV218', 'UPDASV073')
mixedcor <- c(pwqs, nwqs)
mixedcor_df <- data.frame(Index = mixedcor)
# Read taxonIDname dataframe
taxonIDname <- read_excel("C:\\Users\\yuqingw1\\Workfolder\\ProcessingData\\processing_4_microbiome_new\\taxonIDmappingdict.xlsx")
# Merge mixedcor_df with taxonIDname
merged_df <- mixedcor_df %>%
inner_join(taxonIDname, by = c("Index" = "newtaxonID"))
# Define the custom function
extract_name <- function(row) {
attlist <- str_split(row, ",")[[1]]
if (attlist[length(attlist)] == 'nan') {
if (attlist[length(attlist) - 1] != 'nan') {
name <- paste('Family:', attlist[length(attlist) - 1])
} else if (attlist[length(attlist) - 2] != 'nan') {
name <- paste('Order:', attlist[length(attlist) - 2])
} else if (attlist[length(attlist) - 3] != 'nan') {
name <- paste('Class:', attlist[length(attlist) - 3])
} else if (attlist[length(attlist) - 4] != 'nan') {
name <- paste('Phylum:', attlist[length(attlist) - 4])
} else {
name <- paste('Unknown:', attlist[length(attlist) - 5])
}
} else {
name <- attlist[length(attlist)]
}
return(name)
}
# Assuming 'name' is the data frame and 'attribute' is the column
merged_df <- merged_df %>%
mutate(newname = sapply(attribute, extract_name))
merged_df$newname <- gsub("_", " ", merged_df$newname)
merged_df$newname[merged_df$Index == "UPDASV290"] <- "Family:Lactobacillaceae Gene:Weissella"
merged_df$newname[merged_df$Index == "UPDASV471"] <- "Family:Leuconostocaceae Gene:Weissella"
merged_df$newname[merged_df$Index == "UPDASV048"] <- "Family:Akkermansiaceae Gene:Akkermansia"
merged_df$newname[merged_df$Index == "UPDASV095"] <- "Family:Verrucomicrobiaceae Gene:Akkermansia"
merged_df$newname[merged_df$Index == "UPDASV068"] <- "Family:Enterobacteriaceae Gene:Pantoea"
merged_df$newname[merged_df$Index == "UPDASV323"] <- "Family:Erwiniaceae Gene:Pantoea"
merged_df$newname[merged_df$Index == "UPDASV074"] <- "Family:Flavobacteriaceae Gene:Empedobacter"
merged_df$newname[merged_df$Index == "UPDASV227"] <- "Family:Weeksellaceae Gene:Empedobacter"
merged_df$newname[merged_df$Index == "UPDASV042"] <- "Order:Propionibacteriales Gene:Tessaracoccus"
merged_df$newname[merged_df$Index == "UPDASV325"] <- "Order:Actinomycetales Gene:Tessaracoccus"
# Convert mixedcor values to new names
mixedcor_with_newnames <- merged_df$newname
name_mapping <- merged_df %>%
filter(Index %in% colnames(df)) %>%
select(Index, newname)
# Create a named vector for renaming
rename_vector <- setNames(name_mapping$Index, name_mapping$newname)
# Rename the columns in df
df <- df %>%
rename(!!!rename_vector)
pwqs_newnames <- name_mapping$newname[name_mapping$Index %in% pwqs]
nwqs_newnames <- name_mapping$newname[name_mapping$Index %in% nwqs]
pwqs <- as.character(pwqs_newnames)
nwqs <- as.character(nwqs_newnames)
#### mixture model
formula_str <- "Ghrelin_v3 ~ pwqs + nwqs + age + gender_Male + bmi_binned2_30.0_inf + bmi_binned2_inf_18.5 + smoking_status_Current + diabetes2_Yes"
Ghrelin_results2i <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames,
data = df,
q = 10, validation = 0, b = 5, b1_pos = TRUE, b_constr = TRUE, rh = 5,
family = "gaussian", seed = 2024)
summary(Ghrelin_results2i)
Ghrelin_summary_model <- summary(Ghrelin_results2i)
# Extract coefficients
Ghrelin_coefficients_info <- Ghrelin_summary_model$coefficients  # This usually contains estimates, std. error, t-value, and p-value
# Get confidence intervals
Ghrelin_conf_intervals <- confint(Ghrelin_results2i, level = 0.95)  # Adjust the level if needed
# Base R approach
Ghrelin_coefficients_df <- data.frame(Ghrelin_coefficients_info)
Ghrelin_conf_intervals_df <- data.frame(Ghrelin_conf_intervals)
# Naming the columns correctly
names(Ghrelin_conf_intervals_df) <- c("2.5 %", "97.5 %")
# Combining the estimates and confidence intervals
Ghrelin_final_df <- cbind(Ghrelin_coefficients_df, Ghrelin_conf_intervals_df)
# If you only want certain columns (Estimate, Std. Error, 2.5 %, 97.5 %)
Ghrelin_final_df <- Ghrelin_final_df[, c("Estimate", "Std..Error", "2.5 %", "97.5 %")]
print(Ghrelin_final_df)
print(gwqs_summary_tab(Ghrelin_results2i))
Ghrelin_mf_df <- as.data.frame(signif(coef(summary(Ghrelin_results2i)), 3))
print(kable_styling(kable(Ghrelin_mf_df, row.names = TRUE)))
print(gwqs_weights_tab(Ghrelin_results2i))
Ghrelin_final_weight <- Ghrelin_results2i$final_weights
Ghrelin_final_weight[, -1] <- signif(Ghrelin_final_weight[, -1], 3)
print(kable_styling(kable(Ghrelin_final_weight, row.names = FALSE)))
###### Ghrelin Step 2
# we run the model setting the penalization term equal to 90
Ghrelin_results2i_l90 <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames, data = df,
q = 10, validation = 0, b = 5, b1_pos = TRUE, rh = 5,
family = "gaussian", seed = 2024, lambda = 90)
# we run the model setting the penalization term equal to 900
Ghrelin_results2i_l900 <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames, data = df,
q = 10, validation = 0, b = 5, b1_pos = TRUE, rh = 5,
family = "gaussian", seed = 2024, lambda = 900)
# we run the model setting the penalization term equal to 900
Ghrelin_results2i_l9000 <- gwqs(formula = as.formula(formula_str),
mix_name = mixedcor_with_newnames, data = df,
q = 10, validation = 0, b = 5, b1_pos = TRUE, rh = 5,
family = "gaussian", seed = 2024, lambda = 9000)
Ghrelin_lambda_AIC_2i <- data.frame(lambda = c(0, 90, 900, 9000),
AIC = c(Ghrelin_results2i$fit$aic, Ghrelin_results2i_l90$fit$aic,
Ghrelin_results2i_l900$fit$aic, Ghrelin_results2i_l9000$fit$aic))
print(kable(Ghrelin_lambda_AIC_2i) %>% kable_styling())
### PLOT
gwqs_boxplot(Ghrelin_results2i)
library(ggplot2)
library(reshape2)
# Assuming you have Insulin_results2i, Resistin_results2i, and Ghrelin_results2i models loaded
selected_microbiomes <- function(model, threshold) {
final_weights <- model$final_weights
positive_microbiomes <- final_weights[final_weights$mean_weight > threshold, "mix_name"]
negative_microbiomes <- final_weights[final_weights$mean_weight < -threshold, "mix_name"]
unique(c(positive_microbiomes, negative_microbiomes))
}
# Identify microbiomes for both models
threshold <- 1 / length(Resistin_results2i$mix_name)
resistin_microbiomes <- selected_microbiomes(Resistin_results2i, threshold)
insulin_microbiomes <- selected_microbiomes(Insulin_results2i, threshold)
# Find common microbiomes in both models
common_microbiomes <- intersect(resistin_microbiomes, insulin_microbiomes)
# Melt and filter the weight matrices for Resistin
melted_resistin <- melt(Resistin_results2i$wmat, varnames = c("rh", "mix_name"))
melted_resistin <- melted_resistin[melted_resistin$mix_name %in% common_microbiomes, ]
melted_resistin$model <- "Resistin"
library(ggplot2)
library(reshape2)
# Function to identify selected microbiomes
selected_microbiomes <- function(model, threshold) {
final_weights <- model$final_weights
positive_microbiomes <- final_weights[final_weights$mean_weight > threshold, "mix_name"]
negative_microbiomes <- final_weights[final_weights$mean_weight < -threshold, "mix_name"]
unique(c(positive_microbiomes, negative_microbiomes))
}
